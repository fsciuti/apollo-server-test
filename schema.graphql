interface MutationResponse {
  code: String!
  success: Boolean!
  message: String!
}

interface Person {
  id: ID!
  name: String!
}

enum PropertyType {
  VILLA
  STUDIO
}

"Descrizione d'esempio di un tipo"
type Address {
  """
  Descrizione d'esempio di un field (multi-line)
  """
  street: String
  city: String
  state: String
  zip: String
}

type Customer implements Person {
  id: ID!
  email: String!
  name: String!
  address: Address
  bookings(
      "Descrizione d'esempio di un argomento"
      limit: Int
      ): [Booking!]
  vehicle: Vehicle
}

scalar DateTime

type Booking {
  id: ID!
  propertyId: ID!
  customer: Customer!
  startTime: DateTime!
  endTime: DateTime!
  property: Property!
}

type Property {
  id: ID!
  name: String!
  type: PropertyType
}

union Vehicle = Bike | Car

type Bike {
  id: ID!
  bikeType: String
}

type Car {
  id: ID!
  licensePlate: String
}

type bookingQueryResponse implements MutationResponse { # also named: addCustomerMutationPayload
  code: String!
  success: Boolean!
  message: String!
  bookings: [Booking]!
}


input addBookingInput {
  propertyId: ID!
  customerId: ID!
  startTime: DateTime!
  endTime: DateTime!
}

input addCustomerInput {
  name: String!
  email: String!
}

input addPropertyInput {
  name: String!
  type: PropertyType
}

type addBookingMutationResponse implements MutationResponse { # also named: addBookingMutationPayload
  code: String!
  success: Boolean!
  message: String!
  booking: Booking
}

type addCustomerMutationResponse implements MutationResponse { # also named: addCustomerMutationPayload
  code: String!
  success: Boolean!
  message: String!
  customer: Customer
}

type addPropertyMutationResponse implements MutationResponse { # also named: addPropertyMutationPayload
  code: String!
  success: Boolean!
  message: String!
  property: Property
}

type Query {
  bookings(offset: Int, limit: Int, search: String): [Booking!]
  customers: [Customer!]
  properties: [Property!]
}

type Mutation {
  addBooking(input: addBookingInput): addBookingMutationResponse
  addCustomer(input: addCustomerInput): addCustomerMutationResponse
  addProperty(input: addPropertyInput): addPropertyMutationResponse
}


# type PageInfo {
#   endCursor: String
#   hasNextPage: Boolean!
#   hasPreviousPage: Boolean!
#   startCursor: String
# }

